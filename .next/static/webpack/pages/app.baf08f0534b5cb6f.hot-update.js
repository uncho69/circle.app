"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/app",{

/***/ "./hooks/useUniversalWallet.ts":
/*!*************************************!*\
  !*** ./hooks/useUniversalWallet.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useUniversalWallet: function() { return /* binding */ useUniversalWallet; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n// MetaMask implementation\nconst metaMaskWallet = {\n    name: \"MetaMask\",\n    isAvailable: ()=>{\n        var _window_ethereum;\n        return  true && !!((_window_ethereum = window.ethereum) === null || _window_ethereum === void 0 ? void 0 : _window_ethereum.isMetaMask);\n    },\n    connect: async ()=>{\n        if (!window.ethereum) throw new Error(\"No Ethereum wallet available\");\n        const accounts = await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n        });\n        return accounts[0];\n    },\n    getBalance: async (address)=>{\n        if (!window.ethereum) throw new Error(\"No Ethereum wallet available\");\n        const balance = await window.ethereum.request({\n            method: \"eth_getBalance\",\n            params: [\n                address,\n                \"latest\"\n            ]\n        });\n        return parseInt(balance, 16) / Math.pow(10, 18);\n    },\n    getAccount: async ()=>{\n        if (!window.ethereum) return null;\n        const accounts = await window.ethereum.request({\n            method: \"eth_accounts\"\n        });\n        return accounts[0] || null;\n    },\n    onAccountsChanged: (callback)=>{\n        if (window.ethereum && window.ethereum.on) {\n            window.ethereum.on(\"accountsChanged\", callback);\n        }\n    },\n    onChainChanged: (callback)=>{\n        if (window.ethereum && window.ethereum.on) {\n            window.ethereum.on(\"chainChanged\", callback);\n        }\n    },\n    removeListeners: ()=>{\n        try {\n            if (window.ethereum && typeof window.ethereum.removeListener === \"function\") {\n                window.ethereum.removeListener(\"accountsChanged\", ()=>{})(window.ethereum).removeListener(\"chainChanged\", ()=>{});\n            }\n        } catch (error) {\n            console.warn(\"Failed to remove listeners:\", error);\n        }\n    }\n};\n// Rabby implementation\nconst rabbyWallet = {\n    name: \"Rabby\",\n    isAvailable: ()=> true && !!window.ethereum && window.ethereum.isRabby,\n    connect: async ()=>{\n        if (!window.ethereum) throw new Error(\"Rabby not available\");\n        const accounts = await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n        });\n        return accounts[0];\n    },\n    getBalance: async (address)=>{\n        if (!window.ethereum) throw new Error(\"Rabby not available\");\n        const balance = await window.ethereum.request({\n            method: \"eth_getBalance\",\n            params: [\n                address,\n                \"latest\"\n            ]\n        });\n        return parseInt(balance, 16) / Math.pow(10, 18);\n    },\n    getAccount: async ()=>{\n        if (!window.ethereum) return null;\n        const accounts = await window.ethereum.request({\n            method: \"eth_accounts\"\n        });\n        return accounts[0] || null;\n    },\n    onAccountsChanged: (callback)=>{\n        if (window.ethereum && window.ethereum.on) {\n            window.ethereum.on(\"accountsChanged\", callback);\n        }\n    },\n    onChainChanged: (callback)=>{\n        if (window.ethereum && window.ethereum.on) {\n            window.ethereum.on(\"chainChanged\", callback);\n        }\n    },\n    removeListeners: ()=>{\n        try {\n            if (window.ethereum && typeof window.ethereum.removeListener === \"function\") {\n                window.ethereum.removeListener(\"accountsChanged\", ()=>{})(window.ethereum).removeListener(\"chainChanged\", ()=>{});\n            }\n        } catch (error) {\n            console.warn(\"Failed to remove listeners:\", error);\n        }\n    }\n};\n// Generic Ethereum wallet (for other wallets)\nconst genericWallet = {\n    name: \"Ethereum Wallet\",\n    isAvailable: ()=> true && !!window.ethereum,\n    connect: async ()=>{\n        if (!window.ethereum) throw new Error(\"No Ethereum wallet available\");\n        const accounts = await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n        });\n        return accounts[0];\n    },\n    getBalance: async (address)=>{\n        if (!window.ethereum) throw new Error(\"No Ethereum wallet available\");\n        const balance = await window.ethereum.request({\n            method: \"eth_getBalance\",\n            params: [\n                address,\n                \"latest\"\n            ]\n        });\n        return parseInt(balance, 16) / Math.pow(10, 18);\n    },\n    getAccount: async ()=>{\n        if (!window.ethereum) return null;\n        const accounts = await window.ethereum.request({\n            method: \"eth_accounts\"\n        });\n        return accounts[0] || null;\n    },\n    onAccountsChanged: (callback)=>{\n        if (window.ethereum && window.ethereum.on) {\n            window.ethereum.on(\"accountsChanged\", callback);\n        }\n    },\n    onChainChanged: (callback)=>{\n        if (window.ethereum && window.ethereum.on) {\n            window.ethereum.on(\"chainChanged\", callback);\n        }\n    },\n    removeListeners: ()=>{\n        try {\n            if (window.ethereum && typeof window.ethereum.removeListener === \"function\") {\n                window.ethereum.removeListener(\"accountsChanged\", ()=>{})(window.ethereum).removeListener(\"chainChanged\", ()=>{});\n            }\n        } catch (error) {\n            console.warn(\"Failed to remove listeners:\", error);\n        }\n    }\n};\n// Detect available wallet\nconst detectWallet = ()=>{\n    if (metaMaskWallet.isAvailable()) {\n        return metaMaskWallet;\n    }\n    if (rabbyWallet.isAvailable()) {\n        return rabbyWallet;\n    }\n    if (genericWallet.isAvailable()) {\n        return genericWallet;\n    }\n    throw new Error(\"No Ethereum wallet detected\");\n};\nconst useUniversalWallet = ()=>{\n    const [isConnected, setIsConnected] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [account, setAccount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [balance, setBalance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [walletName, setWalletName] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const connectWallet = async ()=>{\n        setLoading(true);\n        setError(null);\n        try {\n            const wallet = detectWallet();\n            setWalletName(wallet.name);\n            const account = await wallet.connect();\n            setAccount(account);\n            setIsConnected(true);\n            const balance = await wallet.getBalance(account);\n            setBalance(balance);\n            console.log(\"✅ Connected to \".concat(wallet.name, \": \").concat(account));\n            return account;\n        } catch (err) {\n            const errorMessage = err instanceof Error ? err.message : \"Failed to connect wallet\";\n            setError(errorMessage);\n            console.error(\"Wallet connection failed:\", err);\n            throw err;\n        } finally{\n            setLoading(false);\n        }\n    };\n    const getBalance = async (address)=>{\n        try {\n            const wallet = detectWallet();\n            const balance = await wallet.getBalance(address);\n            setBalance(balance);\n            return balance;\n        } catch (error) {\n            console.error(\"Failed to get balance:\", error);\n            return 0;\n        }\n    };\n    const disconnect = ()=>{\n        setIsConnected(false);\n        setAccount(null);\n        setBalance(0);\n        setWalletName(\"\");\n    };\n    // Check for existing connection and listen for changes\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const checkConnection = async ()=>{\n            try {\n                const wallet = detectWallet();\n                setWalletName(wallet.name);\n                const account = await wallet.getAccount();\n                if (account) {\n                    setAccount(account);\n                    setIsConnected(true);\n                    const balance = await wallet.getBalance(account);\n                    setBalance(balance);\n                    console.log(\"✅ Already connected to \".concat(wallet.name, \": \").concat(account));\n                }\n            } catch (error) {\n                console.log(\"No wallet detected or not connected\");\n            }\n        };\n        const handleAccountsChanged = (accounts)=>{\n            if (accounts.length === 0) {\n                disconnect();\n            } else {\n                setAccount(accounts[0]);\n                setIsConnected(true);\n                getBalance(accounts[0]);\n            }\n        };\n        const handleChainChanged = ()=>{\n            window.location.reload();\n        };\n        // Check existing connection\n        checkConnection();\n        // Set up listeners\n        try {\n            const wallet = detectWallet();\n            wallet.onAccountsChanged(handleAccountsChanged);\n            wallet.onChainChanged(handleChainChanged);\n            return ()=>{\n                wallet.removeListeners();\n            };\n        } catch (error) {\n        // No wallet available\n        }\n    }, []);\n    // Mock functions for circle creation (in production would use real smart contracts)\n    const estimateCircleCreation = async ()=>{\n        if (!account) throw new Error(\"Wallet not connected\");\n        // Updated pricing: $300 for circle creation (≈ 0.15 ETH at current prices)\n        const circleCreationCost = 0.15 // ETH\n        ;\n        const gasPrice = 20 // gwei\n        ;\n        const gasLimit = 210000;\n        return {\n            amount: circleCreationCost,\n            gasPrice: gasPrice,\n            gasLimit: gasLimit,\n            totalCost: circleCreationCost + gasLimit * gasPrice / Math.pow(10, 9),\n            usdEquivalent: 300 // $300 USD\n        };\n    };\n    const createCircle = async (circleData)=>{\n        if (!account) throw new Error(\"Wallet not connected\");\n        // Mock transaction - in production would send real transaction\n        const mockHash = \"0x\" + Math.random().toString(16).substring(2, 66);\n        console.log(\"✅ Mock circle creation transaction:\", mockHash);\n        return mockHash;\n    };\n    return {\n        isConnected,\n        account,\n        balance,\n        walletName,\n        loading,\n        error,\n        connectWallet,\n        getBalance,\n        disconnect,\n        estimateCircleCreation,\n        createCircle\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useUniversalWallet.ts\n"));

/***/ })

});