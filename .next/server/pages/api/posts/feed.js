"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/posts/feed";
exports.ids = ["pages/api/posts/feed"];
exports.modules = {

/***/ "better-sqlite3":
/*!*********************************!*\
  !*** external "better-sqlite3" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("better-sqlite3");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fposts%2Ffeed&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fposts%2Ffeed.ts&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fposts%2Ffeed&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fposts%2Ffeed.ts&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_posts_feed_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/posts/feed.ts */ \"(api)/./pages/api/posts/feed.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_posts_feed_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_posts_feed_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/posts/feed\",\n        pathname: \"/api/posts/feed\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_posts_feed_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnBvc3RzJTJGZmVlZCZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTJGYXBpJTJGcG9zdHMlMkZmZWVkLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ3NEO0FBQ3REO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxxREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMscURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyY2xlLWFwcC8/ZTVlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL3Bvc3RzL2ZlZWQudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9wb3N0cy9mZWVkXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvcG9zdHMvZmVlZFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fposts%2Ffeed&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fposts%2Ffeed.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/posts/feed.ts":
/*!*********************************!*\
  !*** ./pages/api/posts/feed.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _utils_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/database */ \"(api)/./utils/database.ts\");\n\n// Initialize database\nlet dbInitialized = false;\nconst initDb = ()=>{\n    if (!dbInitialized) {\n        (0,_utils_database__WEBPACK_IMPORTED_MODULE_0__.initDatabase)();\n        dbInitialized = true;\n    }\n};\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        // Initialize database\n        initDb();\n        const { limit = \"20\", offset = \"0\" } = req.query;\n        const limitNum = parseInt(limit);\n        const offsetNum = parseInt(offset);\n        // Get posts from database\n        const dbPosts = (0,_utils_database__WEBPACK_IMPORTED_MODULE_0__.getPosts)(limitNum, offsetNum);\n        // Convert to API format\n        const posts = dbPosts.map((dbPost)=>({\n                id: dbPost.id.toString(),\n                author: dbPost.author,\n                content: dbPost.content,\n                timestamp: dbPost.created_at,\n                encrypted: false,\n                likes: dbPost.likes,\n                replies: dbPost.replies,\n                reposts: dbPost.reposts,\n                views: 0,\n                visibility: dbPost.visibility,\n                image: dbPost.image || undefined,\n                replyTo: dbPost.reply_to_id?.toString()\n            }));\n        // If no posts, return empty feed (no fake posts)\n        if (posts.length === 0) {\n            return res.status(200).json({\n                success: true,\n                posts: [],\n                total: 0,\n                hasMore: false,\n                message: \"Feed is empty - create your first post!\"\n            });\n        }\n        return res.status(200).json({\n            success: true,\n            posts: posts,\n            total: posts.length,\n            hasMore: posts.length === limitNum,\n            message: \"Feed retrieved successfully\"\n        });\n    } catch (error) {\n        console.error(\"Feed error:\", error);\n        return res.status(500).json({\n            success: false,\n            error: \"Failed to retrieve feed\",\n            message: error instanceof Error ? error.message : \"Unknown error\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvcG9zdHMvZmVlZC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUNnRTtBQUVoRSxzQkFBc0I7QUFDdEIsSUFBSUUsZ0JBQWdCO0FBQ3BCLE1BQU1DLFNBQVM7SUFDYixJQUFJLENBQUNELGVBQWU7UUFDbEJGLDZEQUFZQTtRQUNaRSxnQkFBZ0I7SUFDbEI7QUFDRjtBQWtCZSxlQUFlRSxRQUFRQyxHQUFtQixFQUFFQyxHQUFvQjtJQUM3RSxJQUFJRCxJQUFJRSxNQUFNLEtBQUssT0FBTztRQUN4QixPQUFPRCxJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVDLE9BQU87UUFBcUI7SUFDNUQ7SUFFQSxJQUFJO1FBQ0Ysc0JBQXNCO1FBQ3RCUDtRQUVBLE1BQU0sRUFBRVEsUUFBUSxJQUFJLEVBQUVDLFNBQVMsR0FBRyxFQUFFLEdBQUdQLElBQUlRLEtBQUs7UUFDaEQsTUFBTUMsV0FBV0MsU0FBU0o7UUFDMUIsTUFBTUssWUFBWUQsU0FBU0g7UUFFM0IsMEJBQTBCO1FBQzFCLE1BQU1LLFVBQVVoQix5REFBUUEsQ0FBQ2EsVUFBVUU7UUFFbkMsd0JBQXdCO1FBQ3hCLE1BQU1FLFFBQWdCRCxRQUFRRSxHQUFHLENBQUMsQ0FBQ0MsU0FBaUI7Z0JBQ2xEQyxJQUFJRCxPQUFPQyxFQUFFLENBQUNDLFFBQVE7Z0JBQ3RCQyxRQUFRSCxPQUFPRyxNQUFNO2dCQUNyQkMsU0FBU0osT0FBT0ksT0FBTztnQkFDdkJDLFdBQVdMLE9BQU9NLFVBQVU7Z0JBQzVCQyxXQUFXO2dCQUNYQyxPQUFPUixPQUFPUSxLQUFLO2dCQUNuQkMsU0FBU1QsT0FBT1MsT0FBTztnQkFDdkJDLFNBQVNWLE9BQU9VLE9BQU87Z0JBQ3ZCQyxPQUFPO2dCQUNQQyxZQUFZWixPQUFPWSxVQUFVO2dCQUM3QkMsT0FBT2IsT0FBT2EsS0FBSyxJQUFJQztnQkFDdkJDLFNBQVNmLE9BQU9nQixXQUFXLEVBQUVkO1lBQy9CO1FBRUEsaURBQWlEO1FBQ2pELElBQUlKLE1BQU1tQixNQUFNLEtBQUssR0FBRztZQUN0QixPQUFPL0IsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztnQkFDMUI2QixTQUFTO2dCQUNUcEIsT0FBTyxFQUFFO2dCQUNUcUIsT0FBTztnQkFDUEMsU0FBUztnQkFDVEMsU0FBUztZQUNYO1FBQ0Y7UUFFQSxPQUFPbkMsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUMxQjZCLFNBQVM7WUFDVHBCLE9BQU9BO1lBQ1BxQixPQUFPckIsTUFBTW1CLE1BQU07WUFDbkJHLFNBQVN0QixNQUFNbUIsTUFBTSxLQUFLdkI7WUFDMUIyQixTQUFTO1FBQ1g7SUFFRixFQUFFLE9BQU8vQixPQUFPO1FBQ2RnQyxRQUFRaEMsS0FBSyxDQUFDLGVBQWVBO1FBQzdCLE9BQU9KLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFDMUI2QixTQUFTO1lBQ1Q1QixPQUFPO1lBQ1ArQixTQUFTL0IsaUJBQWlCaUMsUUFBUWpDLE1BQU0rQixPQUFPLEdBQUc7UUFDcEQ7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyY2xlLWFwcC8uL3BhZ2VzL2FwaS9wb3N0cy9mZWVkLnRzP2I4YzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnXG5pbXBvcnQgeyBpbml0RGF0YWJhc2UsIGdldFBvc3RzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZGF0YWJhc2UnXG5cbi8vIEluaXRpYWxpemUgZGF0YWJhc2VcbmxldCBkYkluaXRpYWxpemVkID0gZmFsc2VcbmNvbnN0IGluaXREYiA9ICgpID0+IHtcbiAgaWYgKCFkYkluaXRpYWxpemVkKSB7XG4gICAgaW5pdERhdGFiYXNlKClcbiAgICBkYkluaXRpYWxpemVkID0gdHJ1ZVxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zdCB7XG4gIGlkOiBzdHJpbmdcbiAgY29udGVudDogc3RyaW5nXG4gIGF1dGhvcjogc3RyaW5nXG4gIHRpbWVzdGFtcDogc3RyaW5nXG4gIGVuY3J5cHRlZDogYm9vbGVhblxuICBzaWduYXR1cmU/OiBzdHJpbmdcbiAgbGlrZXM6IG51bWJlclxuICByZXBsaWVzOiBudW1iZXJcbiAgcmVwb3N0czogbnVtYmVyXG4gIHZpZXdzOiBudW1iZXJcbiAgdmlzaWJpbGl0eTogJ3B1YmxpYycgfCAnZm9sbG93ZXJzJyB8ICdwcml2YXRlJ1xuICBpbWFnZT86IHN0cmluZ1xuICByZXBseVRvPzogc3RyaW5nXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UpIHtcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdHRVQnKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgZXJyb3I6ICdNZXRob2Qgbm90IGFsbG93ZWQnIH0pXG4gIH1cblxuICB0cnkge1xuICAgIC8vIEluaXRpYWxpemUgZGF0YWJhc2VcbiAgICBpbml0RGIoKVxuICAgIFxuICAgIGNvbnN0IHsgbGltaXQgPSAnMjAnLCBvZmZzZXQgPSAnMCcgfSA9IHJlcS5xdWVyeVxuICAgIGNvbnN0IGxpbWl0TnVtID0gcGFyc2VJbnQobGltaXQgYXMgc3RyaW5nKVxuICAgIGNvbnN0IG9mZnNldE51bSA9IHBhcnNlSW50KG9mZnNldCBhcyBzdHJpbmcpXG5cbiAgICAvLyBHZXQgcG9zdHMgZnJvbSBkYXRhYmFzZVxuICAgIGNvbnN0IGRiUG9zdHMgPSBnZXRQb3N0cyhsaW1pdE51bSwgb2Zmc2V0TnVtKVxuICAgIFxuICAgIC8vIENvbnZlcnQgdG8gQVBJIGZvcm1hdFxuICAgIGNvbnN0IHBvc3RzOiBQb3N0W10gPSBkYlBvc3RzLm1hcCgoZGJQb3N0OiBhbnkpID0+ICh7XG4gICAgICBpZDogZGJQb3N0LmlkLnRvU3RyaW5nKCksXG4gICAgICBhdXRob3I6IGRiUG9zdC5hdXRob3IsXG4gICAgICBjb250ZW50OiBkYlBvc3QuY29udGVudCxcbiAgICAgIHRpbWVzdGFtcDogZGJQb3N0LmNyZWF0ZWRfYXQsXG4gICAgICBlbmNyeXB0ZWQ6IGZhbHNlLFxuICAgICAgbGlrZXM6IGRiUG9zdC5saWtlcyxcbiAgICAgIHJlcGxpZXM6IGRiUG9zdC5yZXBsaWVzLFxuICAgICAgcmVwb3N0czogZGJQb3N0LnJlcG9zdHMsXG4gICAgICB2aWV3czogMCwgLy8gVmlld3Mgbm90IGltcGxlbWVudGVkIHlldFxuICAgICAgdmlzaWJpbGl0eTogZGJQb3N0LnZpc2liaWxpdHkgYXMgJ3B1YmxpYycgfCAnZm9sbG93ZXJzJyB8ICdwcml2YXRlJyxcbiAgICAgIGltYWdlOiBkYlBvc3QuaW1hZ2UgfHwgdW5kZWZpbmVkLFxuICAgICAgcmVwbHlUbzogZGJQb3N0LnJlcGx5X3RvX2lkPy50b1N0cmluZygpXG4gICAgfSkpXG5cbiAgICAvLyBJZiBubyBwb3N0cywgcmV0dXJuIGVtcHR5IGZlZWQgKG5vIGZha2UgcG9zdHMpXG4gICAgaWYgKHBvc3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgcG9zdHM6IFtdLFxuICAgICAgICB0b3RhbDogMCxcbiAgICAgICAgaGFzTW9yZTogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2U6ICdGZWVkIGlzIGVtcHR5IC0gY3JlYXRlIHlvdXIgZmlyc3QgcG9zdCEnXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgcG9zdHM6IHBvc3RzLFxuICAgICAgdG90YWw6IHBvc3RzLmxlbmd0aCxcbiAgICAgIGhhc01vcmU6IHBvc3RzLmxlbmd0aCA9PT0gbGltaXROdW0sXG4gICAgICBtZXNzYWdlOiAnRmVlZCByZXRyaWV2ZWQgc3VjY2Vzc2Z1bGx5J1xuICAgIH0pXG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGZWVkIGVycm9yOicsIGVycm9yKVxuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiAnRmFpbGVkIHRvIHJldHJpZXZlIGZlZWQnLFxuICAgICAgbWVzc2FnZTogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcbiAgICB9KVxuICB9XG59ICJdLCJuYW1lcyI6WyJpbml0RGF0YWJhc2UiLCJnZXRQb3N0cyIsImRiSW5pdGlhbGl6ZWQiLCJpbml0RGIiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwibWV0aG9kIiwic3RhdHVzIiwianNvbiIsImVycm9yIiwibGltaXQiLCJvZmZzZXQiLCJxdWVyeSIsImxpbWl0TnVtIiwicGFyc2VJbnQiLCJvZmZzZXROdW0iLCJkYlBvc3RzIiwicG9zdHMiLCJtYXAiLCJkYlBvc3QiLCJpZCIsInRvU3RyaW5nIiwiYXV0aG9yIiwiY29udGVudCIsInRpbWVzdGFtcCIsImNyZWF0ZWRfYXQiLCJlbmNyeXB0ZWQiLCJsaWtlcyIsInJlcGxpZXMiLCJyZXBvc3RzIiwidmlld3MiLCJ2aXNpYmlsaXR5IiwiaW1hZ2UiLCJ1bmRlZmluZWQiLCJyZXBseVRvIiwicmVwbHlfdG9faWQiLCJsZW5ndGgiLCJzdWNjZXNzIiwidG90YWwiLCJoYXNNb3JlIiwibWVzc2FnZSIsImNvbnNvbGUiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/posts/feed.ts\n");

/***/ }),

/***/ "(api)/./utils/database.ts":
/*!***************************!*\
  !*** ./utils/database.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addInteraction: () => (/* binding */ addInteraction),\n/* harmony export */   closeDatabase: () => (/* binding */ closeDatabase),\n/* harmony export */   createPost: () => (/* binding */ createPost),\n/* harmony export */   createUser: () => (/* binding */ createUser),\n/* harmony export */   deleteUserPosts: () => (/* binding */ deleteUserPosts),\n/* harmony export */   followUser: () => (/* binding */ followUser),\n/* harmony export */   getDatabase: () => (/* binding */ getDatabase),\n/* harmony export */   getPostById: () => (/* binding */ getPostById),\n/* harmony export */   getPosts: () => (/* binding */ getPosts),\n/* harmony export */   getUserByPseudonym: () => (/* binding */ getUserByPseudonym),\n/* harmony export */   getUserByWallet: () => (/* binding */ getUserByWallet),\n/* harmony export */   hasInteraction: () => (/* binding */ hasInteraction),\n/* harmony export */   initDatabase: () => (/* binding */ initDatabase),\n/* harmony export */   isFollowing: () => (/* binding */ isFollowing),\n/* harmony export */   removeInteraction: () => (/* binding */ removeInteraction),\n/* harmony export */   unfollowUser: () => (/* binding */ unfollowUser),\n/* harmony export */   updatePostStats: () => (/* binding */ updatePostStats),\n/* harmony export */   updateUser: () => (/* binding */ updateUser)\n/* harmony export */ });\n/* harmony import */ var better_sqlite3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-sqlite3 */ \"better-sqlite3\");\n/* harmony import */ var better_sqlite3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(better_sqlite3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// Database file path\nconst dbPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"decentra.db\");\n// Initialize database\nlet db;\nconst initDatabase = ()=>{\n    try {\n        // Ensure data directory exists\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const dataDir = path__WEBPACK_IMPORTED_MODULE_1___default().dirname(dbPath);\n        if (!fs.existsSync(dataDir)) {\n            fs.mkdirSync(dataDir, {\n                recursive: true\n            });\n        }\n        // Open database\n        db = new (better_sqlite3__WEBPACK_IMPORTED_MODULE_0___default())(dbPath);\n        // Enable foreign keys\n        db.pragma(\"foreign_keys = ON\");\n        // Create tables\n        createTables();\n        console.log(\"✅ Database initialized successfully\");\n        return db;\n    } catch (error) {\n        console.error(\"❌ Database initialization failed:\", error);\n        throw error;\n    }\n};\nconst createTables = ()=>{\n    // Users table\n    db.exec(`\n    CREATE TABLE IF NOT EXISTS users (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      wallet_address TEXT UNIQUE NOT NULL,\n      pseudonym TEXT UNIQUE NOT NULL,\n      display_name TEXT,\n      bio TEXT,\n      location TEXT,\n      website TEXT,\n      avatar TEXT,\n      banner_color TEXT DEFAULT '#1a1a1a',\n      social_links TEXT DEFAULT '{}',\n      reputation INTEGER DEFAULT 0,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      last_login DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n    // Posts table\n    db.exec(`\n    CREATE TABLE IF NOT EXISTS posts (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      author_id INTEGER NOT NULL,\n      content TEXT NOT NULL,\n      image TEXT,\n      visibility TEXT DEFAULT 'public',\n      likes INTEGER DEFAULT 0,\n      reposts INTEGER DEFAULT 0,\n      replies INTEGER DEFAULT 0,\n      reply_to_id INTEGER,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (author_id) REFERENCES users (id) ON DELETE CASCADE,\n      FOREIGN KEY (reply_to_id) REFERENCES posts (id) ON DELETE CASCADE\n    )\n  `);\n    // Interactions table (likes, reposts)\n    db.exec(`\n    CREATE TABLE IF NOT EXISTS interactions (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      user_id INTEGER NOT NULL,\n      post_id INTEGER NOT NULL,\n      type TEXT NOT NULL CHECK (type IN ('like', 'repost')),\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,\n      FOREIGN KEY (post_id) REFERENCES posts (id) ON DELETE CASCADE,\n      UNIQUE(user_id, post_id, type)\n    )\n  `);\n    // Follows table\n    db.exec(`\n    CREATE TABLE IF NOT EXISTS follows (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      follower_id INTEGER NOT NULL,\n      following_id INTEGER NOT NULL,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (follower_id) REFERENCES users (id) ON DELETE CASCADE,\n      FOREIGN KEY (following_id) REFERENCES users (id) ON DELETE CASCADE,\n      UNIQUE(follower_id, following_id)\n    )\n  `);\n    // Notifications table\n    db.exec(`\n    CREATE TABLE IF NOT EXISTS notifications (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      user_id INTEGER NOT NULL,\n      from_user_id INTEGER,\n      post_id INTEGER,\n      type TEXT NOT NULL CHECK (type IN ('like', 'repost', 'reply', 'follow')),\n      content TEXT,\n      read BOOLEAN DEFAULT FALSE,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,\n      FOREIGN KEY (from_user_id) REFERENCES users (id) ON DELETE CASCADE,\n      FOREIGN KEY (post_id) REFERENCES posts (id) ON DELETE CASCADE\n    )\n  `);\n    // ZK Proofs table\n    db.exec(`\n    CREATE TABLE IF NOT EXISTS zk_proofs (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      user_id INTEGER NOT NULL,\n      proof_type TEXT NOT NULL,\n      proof_data TEXT NOT NULL,\n      verified BOOLEAN DEFAULT FALSE,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE\n    )\n  `);\n    console.log(\"✅ Database tables created successfully\");\n};\n// Database operations\nconst getDatabase = ()=>{\n    if (!db) {\n        throw new Error(\"Database not initialized. Call initDatabase() first.\");\n    }\n    return db;\n};\n// User operations\nconst createUser = (userData)=>{\n    const db = getDatabase();\n    const stmt = db.prepare(`\n    INSERT INTO users (\n      wallet_address, pseudonym, display_name, bio, location, website, \n      avatar, banner_color, social_links, reputation, created_at, last_login\n    )\n    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n  `);\n    const result = stmt.run(userData.walletAddress.toLowerCase(), userData.pseudonym, userData.displayName || userData.pseudonym, userData.bio || \"\", userData.location || \"\", userData.website || \"\", userData.avatar || \"\", userData.bannerColor || \"#1DA1F2\", JSON.stringify(userData.socialLinks || {}), userData.reputation || 0, userData.createdAt || new Date().toISOString(), userData.lastLogin || new Date().toISOString());\n    return result.lastInsertRowid;\n};\nconst getUserByWallet = (walletAddress)=>{\n    const db = getDatabase();\n    const normalizedAddress = walletAddress.toLowerCase();\n    console.log(\"\\uD83D\\uDD0D Looking up user by wallet:\", normalizedAddress);\n    const stmt = db.prepare(\"SELECT * FROM users WHERE wallet_address = ?\");\n    const user = stmt.get(normalizedAddress);\n    console.log(\"Found user:\", user);\n    return user;\n};\nconst getUserByPseudonym = (pseudonym)=>{\n    const db = getDatabase();\n    const stmt = db.prepare(\"SELECT * FROM users WHERE pseudonym = ?\");\n    return stmt.get(pseudonym);\n};\nconst updateUser = (walletAddress, updates)=>{\n    const db = getDatabase();\n    const fields = Object.keys(updates).map((key)=>`${key} = ?`).join(\", \");\n    const values = Object.values(updates);\n    const stmt = db.prepare(`\n    UPDATE users \n    SET ${fields}, updated_at = CURRENT_TIMESTAMP\n    WHERE wallet_address = ?\n  `);\n    return stmt.run(...values, walletAddress.toLowerCase());\n};\n// Post operations\nconst createPost = (postData)=>{\n    const db = getDatabase();\n    const now = new Date().toISOString();\n    console.log(\"Creating post with timestamp:\", now);\n    const stmt = db.prepare(`\n    INSERT INTO posts (author_id, content, image, visibility, reply_to_id, created_at)\n    VALUES (?, ?, ?, ?, ?, ?)\n  `);\n    const result = stmt.run(postData.authorId, postData.content, postData.image || null, postData.visibility || \"public\", postData.replyToId || null, now);\n    return result.lastInsertRowid;\n};\nconst getPosts = (limit = 20, offset = 0, userId)=>{\n    const db = getDatabase();\n    let query = `\n    SELECT \n      p.*,\n      u.pseudonym as author,\n      u.display_name as author_display_name,\n      u.avatar as author_avatar\n    FROM posts p\n    JOIN users u ON p.author_id = u.id\n    WHERE p.reply_to_id IS NULL\n  `;\n    if (userId) {\n        query += ` AND (p.visibility = 'public' OR p.author_id = ? OR p.author_id IN (\n      SELECT following_id FROM follows WHERE follower_id = ?\n    ))`;\n    } else {\n        query += ` AND p.visibility = 'public'`;\n    }\n    query += ` ORDER BY p.created_at DESC LIMIT ? OFFSET ?`;\n    const stmt = db.prepare(query);\n    const params = userId ? [\n        userId,\n        userId,\n        limit,\n        offset\n    ] : [\n        limit,\n        offset\n    ];\n    return stmt.all(...params);\n};\nconst getPostById = (postId)=>{\n    const db = getDatabase();\n    const stmt = db.prepare(`\n    SELECT \n      p.*,\n      u.pseudonym as author,\n      u.display_name as author_display_name,\n      u.avatar as author_avatar\n    FROM posts p\n    JOIN users u ON p.author_id = u.id\n    WHERE p.id = ?\n  `);\n    return stmt.get(postId);\n};\nconst updatePostStats = (postId)=>{\n    const db = getDatabase();\n    // Update likes count\n    db.prepare(`\n    UPDATE posts \n    SET likes = (SELECT COUNT(*) FROM interactions WHERE post_id = ? AND type = 'like')\n    WHERE id = ?\n  `).run(postId, postId);\n    // Update reposts count\n    db.prepare(`\n    UPDATE posts \n    SET reposts = (SELECT COUNT(*) FROM interactions WHERE post_id = ? AND type = 'repost')\n    WHERE id = ?\n  `).run(postId, postId);\n    // Update replies count\n    db.prepare(`\n    UPDATE posts \n    SET replies = (SELECT COUNT(*) FROM posts WHERE reply_to_id = ?)\n    WHERE id = ?\n  `).run(postId, postId);\n};\n// Interaction operations\nconst addInteraction = (userId, postId, type)=>{\n    const db = getDatabase();\n    const stmt = db.prepare(`\n    INSERT OR IGNORE INTO interactions (user_id, post_id, type)\n    VALUES (?, ?, ?)\n  `);\n    const result = stmt.run(userId, postId, type);\n    if (result.changes > 0) {\n        updatePostStats(postId);\n        return true;\n    }\n    return false;\n};\nconst removeInteraction = (userId, postId, type)=>{\n    const db = getDatabase();\n    const stmt = db.prepare(`\n    DELETE FROM interactions \n    WHERE user_id = ? AND post_id = ? AND type = ?\n  `);\n    const result = stmt.run(userId, postId, type);\n    if (result.changes > 0) {\n        updatePostStats(postId);\n        return true;\n    }\n    return false;\n};\nconst hasInteraction = (userId, postId, type)=>{\n    const db = getDatabase();\n    const stmt = db.prepare(`\n    SELECT COUNT(*) as count \n    FROM interactions \n    WHERE user_id = ? AND post_id = ? AND type = ?\n  `);\n    const result = stmt.get(userId, postId, type);\n    return result.count > 0;\n};\n// Follow operations\nconst followUser = (followerId, followingId)=>{\n    const db = getDatabase();\n    const stmt = db.prepare(`\n    INSERT OR IGNORE INTO follows (follower_id, following_id)\n    VALUES (?, ?)\n  `);\n    return stmt.run(followerId, followingId).changes > 0;\n};\nconst unfollowUser = (followerId, followingId)=>{\n    const db = getDatabase();\n    const stmt = db.prepare(`\n    DELETE FROM follows \n    WHERE follower_id = ? AND following_id = ?\n  `);\n    return stmt.run(followerId, followingId).changes > 0;\n};\nconst isFollowing = (followerId, followingId)=>{\n    const db = getDatabase();\n    const stmt = db.prepare(`\n    SELECT COUNT(*) as count \n    FROM follows \n    WHERE follower_id = ? AND following_id = ?\n  `);\n    const result = stmt.get(followerId, followingId);\n    return result.count > 0;\n};\n// Delete all posts by a user\nconst deleteUserPosts = (pseudonym)=>{\n    const db = getDatabase();\n    // First get the user ID\n    const user = getUserByPseudonym(pseudonym);\n    if (!user || !user.id) {\n        return 0;\n    }\n    // Delete all posts by this user\n    const stmt = db.prepare(`\n    DELETE FROM posts \n    WHERE author_id = ?\n  `);\n    const result = stmt.run(user.id);\n    return result.changes;\n};\n// Close database\nconst closeDatabase = ()=>{\n    if (db) {\n        db.close();\n        console.log(\"✅ Database closed successfully\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/database.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fposts%2Ffeed&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fposts%2Ffeed.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();